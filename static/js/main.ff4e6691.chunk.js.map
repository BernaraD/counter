{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","deleteIcon","width","height","viewBox","className","fill","xmlns","d","fillRule","resetIcon","type","style","margin","onClick","onMinus1","index","count","onAdd1","onDelete","onResetToZero","App","useState","counters","setCounters","updatedCounter","updatedCount","filter","element","i","map","el","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8LAGe,SAASA,EAAQC,GAC5B,IAAMC,EAAa,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,UAAU,cAAcC,KAAK,eAC1EC,MAAM,8BAC1B,0BACIC,EAAE,oKACN,0BAAMC,SAAS,UACTD,EAAE,gPAENE,EAAY,yBAAKR,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,UAAU,+BACvDC,KAAK,eAAeC,MAAM,8BAC7C,0BAAME,SAAS,UACTD,EAAE,sHACR,0BAAMC,SAAS,UACTD,EAAE,+HAGZ,OACI,6BAEI,4BAAQG,KAAK,SAASC,MAAO,CAACC,OAAQ,OAC9BR,UAAU,0BACVS,QAAS,kBAAMd,EAAMe,SAASf,EAAMgB,SAF5C,KAIChB,EAAMiB,MAEP,4BAAQN,KAAK,SAASC,MAAO,CAACC,OAAQ,OAC9BR,UAAU,0BACVS,QAAS,kBAAMd,EAAMkB,OAAOlB,EAAMgB,SAF1C,KAIA,4BAAQL,KAAK,SAASC,MAAO,CAACC,OAAQ,OAC9BR,UAAU,yBACVS,QAAS,kBAAMd,EAAMmB,SAASnB,EAAMgB,SAASf,GAErD,4BAAQU,KAAK,SAASC,MAAO,CAACC,OAAQ,OAC9BR,UAAU,2BACVS,QAAS,kBAAMd,EAAMoB,cAAcpB,EAAMgB,SAASN,I,MCwCvDW,MAxEf,WAAgB,IAAD,EAEqBC,mBAAS,CAAC,EAAG,EAAG,IAFrC,mBAEJC,EAFI,KAEMC,EAFN,KAQLN,EAAS,SAACF,GACZ,IAAMS,EAAc,YAAOF,GAC3BE,EAAeT,GAASS,EAAeT,GAAS,EAChDQ,EAAYC,IAGVV,EAAW,SAACC,GACd,IAAMS,EAAc,YAAOF,GAC3BE,EAAeT,IAAU,EACzBQ,EAAYC,IAWVN,EAAW,SAACH,GACd,IAAMU,EAAeH,EAASI,QAAO,SAACC,EAASC,GAAV,OAAgBA,IAAMb,KAC3DQ,EAAYE,IAGVN,EAAgB,SAACJ,GACnB,IAAMU,EAAY,YAAOH,GACzBG,EAAaV,GAAS,EACtBQ,EAAYE,IAMhB,OACI,yBAAKrB,UAAU,MAAMO,MAAO,CAACC,OAAQ,SACjC,uCACCU,EAASO,KAAI,SAACC,EAAIF,GAAL,OACV,kBAAC9B,EAAD,CACIkB,MAAOc,EACPC,IAAKH,EACLb,MAAOa,EACPX,OAAQA,EACRH,SAAUA,EACVI,SAAUA,EACVC,cAAeA,OAIvB,4BAAQT,KAAK,SACLN,UAAU,0BACVS,QAvDG,WACfU,EAAY,GAAD,mBAAKD,GAAL,CAAe,OAoDtB,eAKA,4BAAQZ,KAAK,SAASC,MAAO,CAACC,OAAQ,OAC9BR,UAAU,0BACVS,QA5CE,WACdU,EAAY,IAEQ,YAAQD,GACbO,KAAI,SAAAF,GAAO,OAAI,OAsC1B,gBCxDQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ff4e6691.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default function Counter(props) {\n    const deleteIcon = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n    </svg>\n    const resetIcon = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-counterclockwise\"\n                           fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\"\n              d=\"M12.83 6.706a5 5 0 0 0-7.103-3.16.5.5 0 1 1-.454-.892A6 6 0 1 1 2.545 5.5a.5.5 0 1 1 .91.417 5 5 0 1 0 9.375.789z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M7.854.146a.5.5 0 0 0-.708 0l-2.5 2.5a.5.5 0 0 0 0 .708l2.5 2.5a.5.5 0 1 0 .708-.708L5.707 3 7.854.854a.5.5 0 0 0 0-.708z\"/>\n    </svg>\n\n    return (\n        <div>\n\n            <button type=\"button\" style={{margin: \"5px\"}}\n                    className=\"btn btn-outline-success\"\n                    onClick={() => props.onMinus1(props.index)}>-</button>\n\n            {props.count}\n\n            <button type=\"button\" style={{margin: \"5px\"}}\n                    className=\"btn btn-outline-success\"\n                    onClick={() => props.onAdd1(props.index)}>+</button>\n\n            <button type=\"button\" style={{margin: \"5px\"}}\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => props.onDelete(props.index)}>{deleteIcon}</button>\n\n            <button type=\"button\" style={{margin: \"5px\"}}\n                    className=\"btn btn btn-outline-dark\"\n                    onClick={() => props.onResetToZero(props.index)}>{resetIcon}</button>\n\n        </div>\n    );\n}\n\n","import React, {useState} from 'react';\nimport Counter from \"./Counter\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport './App.css';\n\nfunction App() {\n\n    const [counters, setCounters] = useState([0, 1, 2])\n\n    const addCounter = () => {\n        setCounters([...counters, 0])\n    }\n\n    const onAdd1 = (index) => {\n        const updatedCounter = [...counters]\n        updatedCounter[index] = updatedCounter[index] + 1\n        setCounters(updatedCounter)\n    }\n\n    const onMinus1 = (index) => {\n        const updatedCounter = [...counters]\n        updatedCounter[index] -= 1\n        setCounters(updatedCounter)\n    }\n\n    const deleteAll = () => {\n        setCounters([])\n\n        const updatedCounter = ([...counters])\n        updatedCounter.map(element => 0)\n\n    }\n\n    const onDelete = (index) => {\n        const updatedCount = counters.filter((element, i) => i !== index)\n        setCounters(updatedCount)\n    }\n\n    const onResetToZero = (index) => {\n        const updatedCount = [...counters]\n        updatedCount[index] = 0\n        setCounters(updatedCount)\n\n\n    }\n\n\n    return (\n        <div className=\"App\" style={{margin: \"30px\"}}>\n            <h3>Counter</h3>\n            {counters.map((el, i) =>\n                <Counter\n                    count={el}\n                    key={i}\n                    index={i}\n                    onAdd1={onAdd1}\n                    onMinus1={onMinus1}\n                    onDelete={onDelete}\n                    onResetToZero={onResetToZero}\n\n                />)}\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-success\"\n                    onClick={addCounter}>Add counter\n            </button>\n\n            <button type=\"button\" style={{margin: \"5px\"}}\n                    className=\"btn btn-outline-success\"\n                    onClick={deleteAll}>Delete All\n            </button>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}